MATRIX 01 
using dynamic programming O(N*M),SC=1
vector<vector<int>> updateMatrix(vector<vector<int>>& mat) 
	{
	    int m = mat.size(), n = mat[0].size(), INF = m + n; // The distance of cells is up to (M+N)
        for (int r = 0; r < m; r++) {
            for (int c = 0; c < n; c++) {
                if (mat[r][c] == 0) continue;
                int top = INF, left = INF;
                if (r - 1 >= 0) top = mat[r - 1][c];
                if (c - 1 >= 0) left = mat[r][c - 1];
                mat[r][c] = min(top, left) + 1;
            }
        }
        for (int r = m - 1; r >= 0; r--) {
            for (int c = n - 1; c >= 0; c--) {
                if (mat[r][c] == 0) continue;
                int bottom = INF, right = INF;
                if (r + 1 < m) bottom = mat[r + 1][c];
                if (c + 1 < n) right = mat[r][c + 1];
                mat[r][c] = min(mat[r][c], min(bottom, right) + 1);
            }
        }
        return mat;
	}   

TOPO SORT USING KAHNS ALGORITHM 
vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    int indegree[V]={0};  queue<int> q;  vector<int> ans;
	    for(int i=0;i<V;i++)
	    {
	        for(auto it: adj[i])
	        {
	            indegree[it]++;
	        }
	    }
	    for(int i=0;i<V;i++)
	    {
	        if(indegree[i]==0)
	        {
	            q.push(i);
	        }
	    }
	    while(!q.empty())
	    {
	        //here nr is the node to be removed 
	        int nr=q.front();
	        q.pop();
	        ans.push_back(nr);
	        for(auto it: adj[nr])
	        {
	            indegree[it]--;
	            if(indegree[it]==0)
	            {
	                q.push(it);
	            }
	        }
	    }
	    return ans;
	}


30/07/2023
safe nodes : meaning the nodes whcih are terminal and all the edges attached to it lead to a terminal node 
vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        vector<int> revlist[V];
       int indegree[V]={0};
        //i->it
        //it->i
        for(int i=0;i<V;i++)
        {
            for(auto it:adj[i])
            {
                revlist[it].push_back(i);
                indegree[i]++;
            }
        }
        queue<int> q;
        vector<int> safenodes;
        for(int i=0;i<V;i++)
        {
            //here it is the each individual element of the reversed list
            if(indegree[i]==0)
            {
                q.push(i);
            }
        }
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            safenodes.push_back(node);
            for(auto it:revlist[node])
            {
                indegree[it]--;
                //check for the indegree of it
                if(indegree[it]==0) q.push(it);
            }
        }
        sort(safenodes.begin(),safenodes.end());
        return safenodes;
    }

TOPOLOGICAL SORTING 
void dfs(int node,int vis[],stack<int> &st,vector<int> adj[])
    {
        vis[node]=1;
        for(auto i:adj[node])
        {
            if(!vis[i])  
            {
                dfs(i,vis,st,adj);
            }
        }
        //u shud push only that particular node not every node u traverse in dfs
        st.push(node);
    }
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    int vis[V]={0};
	    stack<int> st;
	    for(int i=0;i<V;i++)
	    {
	        if(!vis[i])  
	        {  
	            dfs(i,vis,st,adj);
	        }
	    }
	    vector<int> vec;
	    while(!st.empty())
	    {
	        vec.push_back(st.top());
	        st.pop();
	    }
	    return vec;
	}

DETECT CYCLE IN AN UNDIRECTED GRAPH :
rivate:
    bool checkdfs(int node,int vis[],int pathvis[],vector<int> adj[])
    {
        vis[node]=1;
        pathvis[node]=1;
        //traverse the adjacent nodes 
        for(auto i:adj[node])
        {
            //check whether its visited or not 
            if(!vis[i])
            {
                if(checkdfs(i,vis,pathvis,adj)==true) return true;
            }
            //check whether its path visited or not 
            else if(pathvis[i])  return true;
        }
        pathvis[node]=0;
        return false;
    }
    
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        int vis[V]={0};
        int pathvis[V]={0};
        for(int i=0;i<V;i++)
        {
            if(!vis[i])
            {
                if(checkdfs(i,vis,pathvis,adj)==true)  return true; 
            }
        }
        return false;
    }

BIPARTITE GRAPH USAING DFS (COMPLETE THE NUMBER OF PROVINCES ALSO )
private:
    bool dfs(int node,int col,int color[],vector<int> adj[])
    {
        color[node]=col;
        //traverse through the adjacent nodes 
        for(auto it:adj[node])
        {
            //if they r uncoloured
            if(color[it]==-1) 
            {
                if(dfs(it,!col,color,adj)==false)  return false; 
            }
            //if they are coloured with the same colour
            else if(color[it]==col)
                return false;
        }
        return true;
    }
public:
	bool isBipartite(int V, vector<int>adj[]){
	    int color[V];
	    for(int i=0;i<V;i++)
	    {
	        color[i]=-1;
	    }
	    //connected components
	    for(int i=0;i<V;i++)
	    {
	        if(color[i]==-1)
	        {
	            if(dfs(i,0,color,adj)==false) return false; 
	        }
	    }
	    return true;
	}


NUMBER OF DISTINCT ISLANDS:
APPROACH : SAME DFS WITH CALLING 8 NEIGHBOURS AT ONCE AND ALSO MATRIX IS CHARACTER ONE BE CAREFUL

private:
  void bfs(int row,int col,vector<vector<int>> &vis,vector<vector<char>>& matrix)
  {
      int n= matrix.size();
      int m= matrix[0].size();
      vis[row][col]=1;
      queue<pair<int,int>> q;
      q.push({row,col});
      while(!q.empty())
       {
           int row=q.front().first;
           int col=q.front().second;
           q.pop();
           for(int delrow=-1;delrow<=1;delrow++)
           {
               for(int delc=-1;delc<=1;delc++)
               {
                  int  nrow=row+delrow;
                  int ncol=col+delc;
                  if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && matrix[nrow][ncol]=='1' &&!vis[nrow][ncol])
                  {
                      vis[nrow][ncol]=1;
                      q.push({nrow,ncol});
                  }
               }
           }
           
       }
  }
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& matrix) 
    {
        int n= matrix.size();
        int m= matrix[0].size();
       vector<vector<int>> vis(n,vector<int>(m,0));
       int count=0;
       for(int i=0;i<n;i++)
       {
           for(int j=0;j<m;j++)
           {
               if(!vis[i][j]&&matrix[i][j]=='1')//remember here matrix is a character based 2D matrix
               {
                   bfs(i,j,vis,matrix);
                   count++;
               }
           }
       }
       return count;
    }

WORD LADDER 
int wordLadderLength(string startWord, string targetWord,
                         vector<string> &wordList)
    {
    // Creating a queue ds of type {word,transitions to reach ‘word’}.
        queue<pair<string, int>> q;

        // BFS traversal with pushing values in queue 
        // when after a transformation, a word is found in wordList.
        q.push({startWord, 1});

        // Push all values of wordList into a set
        // to make deletion from it easier and in less time complexity.
        unordered_set<string> st(wordList.begin(), wordList.end());
        st.erase(startWord);
        while (!q.empty())
        {
            string word = q.front().first;
            int steps = q.front().second;
            q.pop();

            // we return the steps as soon as
            // the first occurence of targetWord is found.
            if (word == targetWord)
                return steps;

            for (int i = 0; i < word.size(); i++)
            {
                // Now, replace each character of ‘word’ with char
                // from a-z then check if ‘word’ exists in wordList.
                char original = word[i];
                for (char ch = 'a'; ch <= 'z'; ch++)
                {
                    word[i] = ch;
                    // check if it exists in the set and push it in the queue.
                    if (st.find(word) != st.end())
                    {
                        st.erase(word);
                        q.push({word, steps + 1});
                    }
                }
                word[i] = original;
            }
        }
        // If there is no transformation sequence possible
        return 0;
    }
USING BFS TC AND SC O(M*N)
vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    int n=grid.size(); int m=grid[0].size();
	    vector<vector<int>> vis(n,vector<int>(m,0));
	    vector<vector<int>> dist(n,vector<int>(m,0));
	    queue<pair<pair<int,int>,int>> q;
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<m;j++)
	        {
	            if(grid[i][j]==1)
	            {
	                q.push({{i,j},0});
	                vis[i][j]=1;
	            }
	            else{
	                vis[i][j]=0;
	            }
	        }
	    }
	    int delrow[]={-1,0,+1,0};
	    int delcol[]={0,+1,0,-1};
	    while(!q.empty())
	    {
	        int row=q.front().first.first;
	        int col=q.front().first.second;
	        int duram=q.front().second;
	        q.pop();
	        dist[row][col]=duram;
	        for(int i=0;i<4;i++)
	        {
	            int nrow=row+delrow[i];
	            int ncol=col+delcol[i];
	            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==0)
	            {
	                vis[nrow][ncol]=1;
	                q.push({{nrow,ncol},duram+1});
	                
	            }
	        
	        }
	   }
	   return dist;
	}

DETECT A CYCLE IN A GRAPH 
 bool detect(int n,int vis[],vector<int>adj[])
    {
        vis[n]=1;
        queue<pair<int,int>> q;
        q.push({n,-1});
        while(!q.empty())
        {
            int parent=q.front().second;//here front is the function so () should thhere for it 
            int node=q.front().first;//not for first or second
            q.pop();
            for(auto adjnode:adj[node])
            {
                if(!vis[adjnode])
            {
                vis[adjnode]=1;
                q.push({adjnode,node});//at this point node becomes the parent i.e q.seocnd
                //and adjnode becomes the node or child sp this step is written 
            }
            else if(parent!=adjnode)    return true;
            }
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        int vis[V]={0};
        for(int i=0;i<V;i++)
        {
            if(!vis[i])  
            {  
                if(detect(i,vis,adj))//noneed of [] beside adj or vis
                    return true;
            }
        }
        return false;
    }
BFS OF A GRAPH:
clear intuition: 

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        // Code here visited array,queue,insert into queue look if its visited then skip 
        vector<int> visited;//lets say this is the vector for bfs traversal
        int visit[V]={0};
        visit[0]=1;
        queue<int> q;
        q.push(0);
        while(!q.empty())
        {
            int g=q.front();//here g signifies the node 
            q.pop();
            visited.push_back(g);
        for(auto it:adj[g])
        {if(!visit[it])
        {
            visit[it]=1;
            q.push(it);
        }} }
        return visited;
    }

DFS INORDER TRAVERSAL:
LEETCODE DAIly challenge:
Its my first solution which i have done on my own i feel very proud though it has a TC OF o(n2) I STILL feel proud about this 
INTUITION:
FIRSTLY INSERT THE ELEMENTS IN INORDER TRAVERSAL INTO THE VECTOR AND COMPUTE THE MINIMUM ABSOLUTE DIFFERENCE 
class Solution {
public:
   vector<int>mindif;
    void dfsinorder(TreeNode* node)
    {
        if(node==NULL)
        return;
        dfsinorder(node->left);
        mindif.push_back(node->val);
        dfsinorder(node->right);
    }
    int getMinimumDifference(TreeNode* root) {
        if(root==NULL)
        return 0;
        dfsinorder(root);
        int x=INT_MAX;
        for(int i=0;i<mindif.size();i++)
        {
            {
                for(int j=i+1;j<mindif.size();j++)
                {
                    int diff=abs(mindif[i]-mindif[j]);
                    x=min(x,diff);
                }
            }
           
        }
        return x;

    }
};
