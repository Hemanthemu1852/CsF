Binary tree representation:
u r given a vector and its root node and u have to create a tree 
USING RECURSION 
node* build(vector<int> &v, int i) {
        node *root = NULL;
        if(i < v.size()) {
            root = newNode(v[i]);
        }
        else
            return NULL;
        i = 2*i;
        root->left = build(v, i+1);
        root->right = build(v, i+2);
        return root;
    }
    void create_tree(node* &root0, vector<int> &vec){
        //Your code goes here
        root0 = build(vec, 0);
    }

USING QUEUE:
void create_tree(node* root0, vector<int> &vec){
        queue<node*> q;
        q.push(root0); 
        int i=1;/*declaraction*/ 
        int n=vec.size();
        while(i<n) // condition
        {
            //here node changes 
            node *rn=q.front();
            q.pop();
            node* left=newNode(vec[i++]);//updation
            rn->left=left;
            q.push(left);
            if(i>=n) break;
            node* right=newNode(vec[i++]);//2nd updation 
            rn->right=right;
            q.push(right);
        }
    }

08/08/2023
MORRIS INORDER TRAVERSAL TC -O(N),SC-O(1)
vector<int> inOrder(Node* root) {
        // Your code here
        vector<int> inorder;
        Node *curr=root;
        while(curr!=NULL)
        {
            if(curr->left==NULL)
            {
                inorder.push_back(curr->data);
                curr=curr->right;
            }
            //when curr->left is not null and if there exists a right go to the righmost
            else
            {
            Node* prev=curr->left;
            while(prev->right && prev->right!=curr)
            {
                prev=prev->right;
            }
            //once when the righmost guy becomes null connect it to the current 
            if(prev->right==NULL)
            {
                prev->right=curr;
                curr=curr->left;//then go to the left one after establishing a thread
            }
            //if  prev->right isnt null then it has to be connected to the currnt 
            else{
                prev->right=NULL;//cut the connection
                inorder.push_back(curr->data);
                curr=curr->right;//the go to the right 
            }
        }
    }
        return inorder;
    }

MORRIS PRE ORDER TRAVERSAL 
vector <int> preorder(Node* root)
{
  // Your code here
  Node *curr=root;   vector<int> preorder;
  while(curr!=NULL)
  {
      if(curr->left==NULL)
      {
          preorder.push_back(curr->data);
          curr=curr->right;
      }
      else
      {
          Node *prev=curr->left;
          while(prev->right && prev->right!=curr)
          {
              prev=prev->right;
          }
          if(prev->right==NULL)
          {
              prev->right=curr;
              preorder.push_back(curr->data);
              curr=curr->left;
          }
          else
          {
              prev->right=NULL;
              curr=curr->right;
          }
      }
  }
  return preorder;
}
RIGHT VIEW OF A TREE
void recursion(Node *root,int level,vector<int> &v)
{
    if(root==NULL) return ;
    if(level==v.size())  v.push_back(root->data);
   recursion(root->right,level+1,v);
   recursion(root->left,level+1,v);
}
vector<int> leftView(Node *root)
{
   vector<int > vec;
   int level=0;
   recursion(root,level,vec);
   // Your code here
   return vec;
}
LEFT VIEW 
void recursion(Node *root,int level,vector<int> &v)
{
    if(root==NULL) return ;
    if(level==v.size())  v.push_back(root->data);
    recursion(root->left,level+1,v);
    recursion(root->right,level+1,v);
}
vector<int> leftView(Node *root)
{
   vector<int > vec;
   int level=0;
   recursion(root,level,vec);
   // Your code here
   return vec;
}

BOTTOM VIEW
vector <int> bottomView(Node *root) {
        // Your Code Here
        vector<int>v;
        if(root==NULL) return v;
        queue<pair<Node*,int>> q;
        map<int,int>mp;
        q.push({root,0});
        while(!q.empty())
        {
            auto it=q.front();
            q.pop();
            Node *node=it.first;
            int line = it.second;
            mp[line]=node->data;
            if(node->left) 
            {
                q.push({node->left,line-1});
            }
            if(node->right)
            {
                q.push({node->right,line+1});
            }
        }
        for(auto it: mp)
        {
            v.push_back(it.second );
        }
        return v;
    }

vector<int> topView(Node *root)
    {
        //mistakes:forgot to pop,also in mp.find
        vector<int > v;
        if(root==NULL) return v;
        queue<pair<Node*,int>> q;
        map<int,int>mp;
        q.push({root,0});
        while(!q.empty())
        {
            auto it=q.front();
            q.pop();
            Node* node =it.first;
            int line=it.second;
            if(mp.find(line)==mp.end()) mp[line]=node->data;
            if(node->left)  q.push({node->left,line-1});
            if(node->right) q.push({node->right,line+1});
            
        }
        for(auto it:mp)
        {
            v.push_back(it.second);
        }
        return v;
    }


VERTICAL ORDER TRAVERSAL

GFG: optimum:
vector<int> verticalOrder(Node *root)
    {
        //Your code here
        map<int,vector<int>> mp; 
        queue<pair<Node*,int>> q;
        q.push({root,0});
        while(!q.empty())
         {
           auto it=q.front();
           q.pop();
           Node *nodee=it.first;
           int x=it.second;
            //inserting into the multiset of the map
            mp[x].push_back(nodee->data);
            if(nodee->left)
            {
                q.push({nodee->left,x-1});
            }
            if(nodee->right)
            {
                q.push({nodee->right,x+1});
            }
         }
        
        vector<int> col;
        for(auto it:mp)
        {
            
            for(auto i:it.second)
            {
               col.push_back(i);
            }
            
        }
        return col;
    }

LEETCODE STRIVER
map<int,map<int,multiset<int>>> mp; 
        vector<vector<int>> answer;
        queue<pair<TreeNode*,pair<int,int>>> q;
        q.push({root,{0,0}});
        while(!q.empty())
        {
           auto it=q.front();
           q.pop();
           TreeNode *nodee=it.first;
           int x=it.second.first;
            int y=it.second.second;
            //inserting into the multiset of the map
            mp[x][y].insert(nodee->val);
            if(nodee->left)
            {
                q.push({nodee->left,{x-1,y+1}});
            }
            if(nodee->right)
            {
                q.push({nodee->right,{x+1,y+1}});
            }
        }
        for(auto it:mp)
        {
            vector<int> col;
            for(auto i:it.second)
            {
                col.insert(col.end(),i.second.begin(),i.second.end());
            }
            answer.push_back(col);
        }
        return answer;
    }


LEVE ORDER TRAVERSAL IS DONE 
here is the ZIGZAG TRAVERSAL 
same as level as level order traversal but u use a flag when its true LtoR false: Rto L
vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> zigzag;
        if(root==NULL) return zigzag;
        queue<TreeNode*> q;
        bool LefttoRight=true;
        q.push(root);
        while(!q.empty())
        {
            int size=q.size();
            vector<int> level(size);
            for(int i=0;i<size;i++)
            {
                TreeNode* node=q.front();
                q.pop();
                //if its from RtoL then with increasing i value index decreases and we are following RtoL order 
                int index=(LefttoRight)? i : size-i-1;
                level[index]=node->val;
                if(node->left) q.push(node->left);
                if(node->right)  q.push(node->right);
            }
            zigzag.push_back(level);
            LefttoRight=!LefttoRight;
            
        }
    return zigzag;
    }
return in a single vector
vector <int> zigZagTraversal(Node* root)
    {
        vector<int> zigzag;
        if(root==NULL) return zigzag;
        queue<Node*> q;
        bool LefttoRight=true;
        q.push(root);
        while(!q.empty())
        {
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                Node* node=q.front();
                q.pop();
                //if its from RtoL then with increasing i value index decreases and we are following RtoL order 
                int index=(LefttoRight)? i : size-i-1;
                zigzag[index]=node->data;
                if(node->left) q.push(node->left);
                if(node->right)  q.push(node->right);
            }
            zigzag.insert(zigzag.end(),level.begin(),level.end());
            LefttoRight=!LefttoRight;
        }
    return zigzag;
    }


MAX HEIGHT 
int maxDepth(TreeNode* root) {
        if(root==NULL) return 0;
        int lh=maxDepth(root->left);
        int rh=maxDepth(root->right);
        return 1+max(lh,rh);
    }

FINDING THE DIAMETER
private: 
int findheight(TreeNode* node,int &diameter)
{
    if(node==NULL)  return 0;
    int lh= findheight(node->left,diameter);
    int rh=findheight(node->right,diameter);
    //we are using the left height and right height's sum to calc diameter so if this function doesnt return the height then there's no point in writing the fucntion
    diameter=max(diameter,lh+rh);
    return 1+max(lh,rh);
    //height is 1+max(lh,rh)
}
public:
    int diameterOfBinaryTree(TreeNode* root) {
        int diameter=INT_MIN;
        findheight(root,diameter);
        return diameter; 
    }
