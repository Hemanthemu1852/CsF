Binary tree representation:
u r given a vector and its root node and u have to create a tree 
USING RECURSION 
node* build(vector<int> &v, int i) {
        node *root = NULL;
        if(i < v.size()) {
            root = newNode(v[i]);
        }
        else
            return NULL;
        i = 2*i;
        root->left = build(v, i+1);
        root->right = build(v, i+2);
        return root;
    }
    void create_tree(node* &root0, vector<int> &vec){
        //Your code goes here
        root0 = build(vec, 0);
    }

USING QUEUE:
void create_tree(node* root0, vector<int> &vec){
        queue<node*> q;
        q.push(root0); 
        int i=1;/*declaraction*/ 
        int n=vec.size();
        while(i<n) // condition
        {
            //here node changes 
            node *rn=q.front();
            q.pop();
            node* left=newNode(vec[i++]);//updation
            rn->left=left;
            q.push(left);
            if(i>=n) break;
            node* right=newNode(vec[i++]);//2nd updation 
            rn->right=right;
            q.push(right);
        }
    }

08/08/2023
MORRIS INORDER TRAVERSAL TC -O(N),SC-O(1)
vector<int> inOrder(Node* root) {
        // Your code here
        vector<int> inorder;
        Node *curr=root;
        while(curr!=NULL)
        {
            if(curr->left==NULL)
            {
                inorder.push_back(curr->data);
                curr=curr->right;
            }
            //when curr->left is not null and if there exists a right go to the righmost
            else
            {
            Node* prev=curr->left;
            while(prev->right && prev->right!=curr)
            {
                prev=prev->right;
            }
            //once when the righmost guy becomes null connect it to the current 
            if(prev->right==NULL)
            {
                prev->right=curr;
                curr=curr->left;//then go to the left one after establishing a thread
            }
            //if  prev->right isnt null then it has to be connected to the currnt 
            else{
                prev->right=NULL;//cut the connection
                inorder.push_back(curr->data);
                curr=curr->right;//the go to the right 
            }
        }
    }
        return inorder;
    }

MORRIS PRE ORDER TRAVERSAL 
vector <int> preorder(Node* root)
{
  // Your code here
  Node *curr=root;   vector<int> preorder;
  while(curr!=NULL)
  {
      if(curr->left==NULL)
      {
          preorder.push_back(curr->data);
          curr=curr->right;
      }
      else
      {
          Node *prev=curr->left;
          while(prev->right && prev->right!=curr)
          {
              prev=prev->right;
          }
          if(prev->right==NULL)
          {
              prev->right=curr;
              preorder.push_back(curr->data);
              curr=curr->left;
          }
          else
          {
              prev->right=NULL;
              curr=curr->right;
          }
      }
  }
  return preorder;
}
RIGHT VIEW OF A TREE
void recursion(Node *root,int level,vector<int> &v)
{
    if(root==NULL) return ;
    if(level==v.size())  v.push_back(root->data);
   recursion(root->right,level+1,v);
   recursion(root->left,level+1,v);
}
vector<int> leftView(Node *root)
{
   vector<int > vec;
   int level=0;
   recursion(root,level,vec);
   // Your code here
   return vec;
}
LEFT VIEW 
void recursion(Node *root,int level,vector<int> &v)
{
    if(root==NULL) return ;
    if(level==v.size())  v.push_back(root->data);
    recursion(root->left,level+1,v);
    recursion(root->right,level+1,v);
}
vector<int> leftView(Node *root)
{
   vector<int > vec;
   int level=0;
   recursion(root,level,vec);
   // Your code here
   return vec;
}
